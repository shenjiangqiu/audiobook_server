name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ag/work
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
        app_version: ${{ env.APP_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: Get the release version from the tag
        shell: bash
        if: env.APP_VERSION == ''
        run: |
          echo "APP_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "version is: ${{ env.APP_VERSION }}"
      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create ${{ env.APP_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1

    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-latest
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          rust: stable-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-latest
          rust: stable
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}


    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux, macos and macos-arm)
      if: matrix.build == 'linux' || matrix.os == 'macos'
      run: |
       strip "target/release/account_manager"
       strip "target/release/audiobook_server"
       strip "target/release/create_new_book"

    - name: Build archive
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
        staging="audiobook_server-${{ needs.create-release.outputs.app_version }}-${{ matrix.target }}"
        mkdir -p "$staging"


        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/release/account_manager.exe" "$staging/"
          cp "target/release/audiobook_server.exe" "$staging/"
          cp "target/release/create_new_book.exe" "$staging/"

          7z a "$staging.zip" "$staging"
          certutil -hashfile "$staging.zip" SHA256 > "$staging.zip.sha256"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$staging.zip.sha256" >> $GITHUB_ENV
        else
          # The man page is only generated on Unix systems. ¯\_(ツ)_/¯
          cp "target/release/account_manager" "$staging/"
          cp "target/release/audiobook_server" "$staging/"
          cp "target/release/create_new_book" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          shasum -a 256 "$staging.tar.gz" > "$staging.tar.gz.sha256"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$staging.tar.gz.sha256" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release upload ${{ needs.create-release.outputs.app_version }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}